<?php
/**
 * Created by PhpStorm.
 * User: rom
 * Date: 4/27/17
 * Time: 11:29 AM
 */

namespace App\Controller;


class CalcsController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('TerritoriesDomains');
    }


    public function getResults()
    {
        //Get request parameters(taxes,domain,politic)

        //edited to test
        $params = $this->request->getQueryParams();
        $taxes = $params['taxes'];
        $domain_id = $params['domain'];
        $scenario_id = $params['scenario'];
        $study_id =  $params['politic'];
        $parent = $params['parent'];
        $levels = $params['levels'];


        //length case study  = 1
        //find political territorial values
        $territories = $this->filterTerritoryData($domain_id,$study_id,$scenario_id,$levels,$parent);

        // get actual globals
        $global_actual = $this->aggGlobal($territories);

        //echo json_encode($global_actual);
        //merge territories with taxes
        $merged = $this->mergeTaxTerritory($territories,$taxes);

        //echo json_encode($global_actual);

        $locals = $this->getLocalsPredict($merged,$global_actual);

        $global_predict = $this->getGlobalsPredict($merged,$global_actual);

        $response = compact('global_predict','locals');

        $this->set(compact('response'));
        $this->set('_serialize',['response']);
    }

    private function filterTerritoryData($domain_id, $study_id, $scenario_id, $levels, $parent)
    {
        $conditions = array();
        if ($levels > 1)
        {
            if($parent == '')
            {
                $conditions = array('Territories.parish' => null);

                /*$territory_study_values = $this->TerritoriesDomains->find('all',['conditions' => ['domain_id = ' => $domain_id]])->select('id','territory_id')
                    ->contain(['Territories' => ['conditions' => ['Territories.parish ' => null ],'fields' =>['id','name']]])
                    ->contain(['Scenarios' => ['conditions' => ['Scenarios.id = ' => $scenario_id],'fields' => ['id', 'ScenariosTerritoriesDomains.territory_domain_id']]])
                    ->contain(['Studies' => ['conditions' => ['Studies.id = ' => $study_id],'fields' => []]]);
                */
            }
            else
            {
                $conditions = array('Territories.parish is not null','Territories.parent_id =' => $parent);

                /*$territory_study_values = $this->TerritoriesDomains->find('all',['conditions' => ['domain_id = ' => $domain_id]])->select('id','territory_id')
                    ->contain(['Territories' => ['conditions' => ['Territories.parish is  not null','Territories.municipality = ' => $parent],'fields' =>['id','name']]])
                    ->contain(['Scenarios' => ['conditions' => ['Scenarios.id = ' => $scenario_id],'fields' => ['id', 'ScenariosTerritoriesDomains.territory_domain_id']]])
                    ->contain(['Studies' => ['conditions' => ['Studies.id = ' => $study_id],'fields' => []]]);
                */

            }
        }


        $territory_study_values = $this->TerritoriesDomains->find('all',['conditions' => ['domain_id = ' => $domain_id]])->select('id','territory_id')
            ->contain(['Territories' => ['conditions' => $conditions,'fields' =>['id','name']]])
            ->contain(['Scenarios' => ['conditions' => ['Scenarios.id = ' => $scenario_id],'fields' => ['id','ScenariosTerritoriesDomains.territory_domain_id']]])
            ->contain(['Studies' => ['conditions' => ['Studies.id = ' => $study_id],'fields' => []]]);

        $current_scenario = array();
        $current_study = array();
        $territories = array() ;
        
        

        foreach ($territory_study_values as $territory)
        {
            foreach ($territory['scenarios'] as $scenarios)
            {
                $current_scenario = ($scenarios['_joinData']->toArray());
            }

            foreach ($territory['studies'] as $studies)
            {
                $current_study =  ($studies['_joinData'])->toArray();
            }
            
            array_push($territories, array_merge($current_study,$current_scenario,$territory['territory']->toArray()));
        }
        return $territories;
    }

    private function getGlobalsPredict($territories,$global_actual)
    {
        $result = array('predicted_total_lodges' => $this->getGlobalPredictLodges($territories),
            'predicted_empty_lodges' => $this->getGlobalPredictEmptyLodges($territories,$global_actual),
            'predicted_mean_tax_rehab' => $this->getPredictedMeanTaxRehab($territories,$global_actual ),
            'predicted_mean_tax_construction' => $this->getPredictedMeanTaxConstruction($territories,$global_actual),
            'predicted_migrations' => $global_actual['migrations'],
            'predicted_total_population' => $global_actual['total_population'],
            'predicted_habitants_per_lodge' => $global_actual['habitants_per_lodge'] );
        return $result;
    }

    private function getLocalsPredict($merged,$global_actual)
    {
        $local = array();

        foreach($merged as $territory)
        {

            array_push($local, (array("id" => $territory['id'],"name" => $territory['name'],"predict_tax_period_variance_lodges" => $this->getPredictedPeriodLodgeVariance($territory),
                "predicted_tax_anual_mean_lodges" => $this->getPredictedAnualMeanLodgeVariance($territory),
                "predicted_first_lodges" => $this->getPredictedFirstLodge($territory),
                "predicted_second_lodges" => $this->getPredictedSecondLodge($territory),
                "predicted_total_empty_lodges" => $this->getPredictedTotalEmptyLodges($territory),
                "predicted_empty_avail_lodges" => $this->getPredictedEmptyAvailableLodges($territory),
                "predicted_empty_rehab_lodges" => $this->getPredictedEmptyRehabLodges($territory),
                "predicted_population_variance" => $this->getPredictedPopulationVariance($territory),
                "total_population" => $territory['total_population'],
                "predicted_required_lodges" => $this->getPredictedRequiredLodges($territory,$merged,$global_actual))));
        }

        return $local;
    }

    private function getPredictedMeanTaxConstruction($territories,$global_actual)
    {
        $result = pow(($this->result3($territories) / ($global_actual['actual_lodges'] + $this->result1($territories) )), 1/29) -1;
        return $result;
    }

    private function getPredictedMeanTaxRehab($territories,$actual_globals)
    {
        $result = 1 - pow(($this->result6($territories) / ($actual_globals['total_actual_empty_rehab_lodges'])),(1/29)) ;
        return $result;
    }

    private function getPredictedPeriodLodgeVariance($territory)
    {
        return ($this->formula3($territory) - $territory['actual_lodges'])/$territory['actual_lodges'];

    }

    private function getPredictedAnualMeanLodgeVariance($territory)
    {
        return pow(($this->formula3($territory) / $territory['actual_lodges']), 1.0/29) - 1;
    }

    private function getPredictedFirstLodge($territory)
    {
        return $this->formula8($territory);

    }

    private function getPredictedSecondLodge($territory)
    {
        return $this->formula9($territory);
    }

    private function getPredictedTotalEmptyLodges($territory)
    {
        return ($this->formula5($territory) + $this->formula6($territory));

    }

    private function getPredictedEmptyAvailableLodges($territory)
    {
        return $this->formula5($territory);

    }

    private function getPredictedEmptyRehabLodges($territory)
    {
        return $this->formula6($territory);
    }

    private function getPredictedPopulationVariance($territory)
    {
        return $territory['total_population'] / $territory['actual_total_population'] - 1;
    }

    private function getPredictedRequiredLodges($territory,$territories,$global_actual)
    {
        return $this->formula13($territory,$territories,$global_actual);

    }


    private function aggGlobal($territories){

        $no_territories =  count($territories);
        $global = $this->getTotal($territories);

        $global['habitants_per_lodge'] = $global['habitants_per_lodge']/$no_territories;

        unset($global['scenario_id'],$global['politic_id'],$global['id'],$global['name']);

        return $global;

    }

    private function getGlobalPredictLodges($territories)
    {
        return $this->result3($territories);
    }

    private function getGlobalPredictEmptyLodges($territories,$globals)
    {
        return $this->result13($territories,$globals);
    }


    private function formula1($territory)
    {

        return $territory['actual_lodges'] * pow(1 + ($territory['tax_anual_desertion']/100), 29)
            - $territory['actual_lodges'];    // acrescentado por JMM
    }

    private function result1($territories)
    {
        $sum = 0;
        foreach($territories as $territory)
        {
            $sum = $sum + $this->formula1($territory);
        }
        return $sum;
    }

    private function formula2($territory) {
        $input_user =  $territory['tax_construction'] / 100;
        //echo($input_user);
        return ($territory['actual_lodges'] + $this->formula1($territory)) * pow(1 + $input_user, 29)
            - ($territory['actual_lodges'] + $this->formula1($territory));    // acrescentado por JMM
    }

    private function result2($territories) {
        $sum = 0;

        foreach($territories as $territory)
        {
            $sum = $sum + $this->formula2($territory);
        }

        return $sum;

    }

    private function formula3($territory)
    {
        return $this->formula1($territory) + $this->formula2($territory) + $territory['actual_lodges'];
    }

    private function result3($territories)
    {
        $sum = 0;

        foreach ($territories as $territory)
        {
            $sum = $sum + $this->formula3($territory);
        }

        return $sum;


    }


    /*private function formula4($territory)
    {
        $input_user = $territory['tax_rehab'] / 100;

        return ($territory['actual_lodges'] * pow(1 + $input_user, 29)) - $territory['actual_lodges'];

    }

    private function result4($territories)
    {
        $sum = 0;

        foreach ($territories as $territory)
            $sum = $sum + $this->formula4($territory);

        return $sum;

    }*/


    private function formula5($territory)
    {
        return $this->formula2($territory) * $territory['tax_actual_empty_lodges'] + $territory['total_actual_empty_avail_lodges'];

    }

    /*private function result5($territories)
    {
        $sum = 0;

        foreach ($territories as $territory)
        {
            $sum = $sum + $this->formula5($territory);
        }

        return $sum;
    }*/

    // Result6 = InputAdmin[i,G] – ( Result2 – InputAdmin[i,G])
    private function formula6($territory)
    {
        $input_user = $territory['tax_rehab'] / 100;
        return $territory['total_actual_empty_rehab_lodges'] -
            ($territory['total_actual_empty_rehab_lodges'] * pow(1 + $input_user, 29) - $territory['total_actual_empty_rehab_lodges']);
    }

    private function result6($territories)
    {
        $sum = 0;

        foreach ($territories as $territory)
        {
            $sum = $sum + $this->formula6($territory);
        }

        return $sum;
    }


    private function formula8($territory)
    {
        $input_user = $territory['tax_rehab'] / 100;

        return ( $territory['tax_actual_first_lodges'] * $this->formula3($territory)) +
            ( ($territory['total_actual_empty_rehab_lodges'] * pow(1 + $input_user, 29) - $territory['total_actual_empty_rehab_lodges']) * $territory['tax_actual_first_lodges']) /
            ($territory['tax_actual_first_lodges'] + $territory['tax_actual_second_lodges']);
    }

    private function result8($territories)
    {
        $sum = 0;

        foreach ($territories as $territory)
        {
            $sum = $sum + $this->formula8($territory);
        }
        return $sum;
    }


    private function formula9($territory)
    {
        $input_user = $territory['tax_rehab'];
        return ( $territory['tax_actual_second_lodges']* $this->formula3($territory)) +
            (( $territory['total_actual_empty_rehab_lodges'] * pow(1 + $input_user, 29) - $territory['total_actual_empty_rehab_lodges'] ) * $territory['tax_actual_second_lodges']) /
            ($territory['tax_actual_first_lodges'] + $territory['tax_actual_second_lodges']);
    }

    /*private function result9($territories)
    {
        $sum = 0;

        foreach ($territories as $territory)
        {
            $sum = $sum + $this->formula9($territory);
        }
        return $sum;

    }*/


    private function formula10($territory) {
        return $territory['total_population'] / $territory['habitants_per_lodge'];

    }

    private function result10($territories) {
        $sum = 0;

        foreach ($territories as $territory)
        {
            $sum = $sum + $this->formula10($territory);
        }

        return $sum;
    }


    private function formula11($territory,$territories,$global) {

        $nAlojMun = $global['total_population'] / $global['habitants_per_lodge'];
        $nAlojSumFreg = $this->result10($territories);
        $ratio = $nAlojMun / $nAlojSumFreg;

        return $this->formula10($territory) * $ratio;
    }

    private function result11($territories,$global) {
        $sum = 0;

        foreach ($territories as $territory)
        {
            $sum = $sum + $this->formula11($territory,$territories,$global);
        }
        return $sum;
    }


    private function formula13($territory,$territories,$global) {

        return - ($this->formula11($territory,$territories,$global)) + ($this->formula8($territory));
    }

    private function result13($territories,$global) {
        return - $this->result11($territories,$global) + $this->result8($territories);
    }

    /*private function maxDeltaPop($territories)
    {
        $current_territory = array_shift($territories);
        $max = $current_territory['']
        foreach ($territories as $territory)
        {
            if $territory['total_population']
        }
    }*/

    /* function maxDeltaPop() {
        $max = myLocalData[0].populacaoTotal2040 / myLocalData[0].populacaoTotal2011;
        for(c = 1; c < myLocalData.length; c++) {
            if(myLocalData[c].populacaoTotal2040 / myLocalData[c].populacaoTotal2011 > max)
                max = myLocalData[c].populacaoTotal2040 / myLocalData[c].populacaoTotal2011;
        }
        return max - 1;
    }*/

    /*function minDeltaPop() {
        min = myLocalData[0].populacaoTotal2040 / myLocalData[0].populacaoTotal2011;
        for(d = 1; d < myLocalData.length; d++) {
            if(myLocalData[d].populacaoTotal2040 / myLocalData[d].populacaoTotal2011 < min)
                min = myLocalData[d].populacaoTotal2040 / myLocalData[d].populacaoTotal2011;
        }
        return min - 1;
    }*/


    private function maxDeltaAloj($territories) {

        $current_territory = array_shift($territories);

        $aloj2040 = $this->formula3($current_territory);
        $aloj2011 = $current_territory['actual_lodges'];
        $max = $aloj2040 / $aloj2011;


        foreach($territories as $territory)
        {
            $aloj2040 = $this->formula3($territory);
            $aloj2011 = $territory['actual_lodges'];

            $temp = $aloj2040/ $aloj2011;

            if ($temp > $max)
            {
                $max = $temp;
            }
        }
        return $max - 1;
    }

    private function minDeltaAloj($territories) {

        $current_territory = array_shift($territories);

        $aloj2040 = $this->formula3($current_territory);
        $aloj2011 = $current_territory['actual_lodges'];

        $min = $aloj2040 / $aloj2011;

        foreach($territories as $territory)
        {
            $aloj2040 = $this->formula3($territory);
            $aloj2011 = $territory['actual_lodges'];

            $temp = $aloj2040/ $aloj2011;

            if($temp < $min)
            {
                $min = $temp;
            }
        }
        return min - 1;
    }



    private function mergeTaxTerritory($territories,$taxes)
    {
        foreach($territories as &$territory)
        {
            foreach ($taxes as $tax_row)
            {
                if ($tax_row['id'] == $territory['id'])
                {
                    $territory['tax_construction'] =$tax_row['tax_construction'];
                    $territory['tax_rehab'] = $tax_row['tax_rehab'];
                }
            }
        }

        unset ($tax_row,$territory);

        return $territories;
    }

    private function getTotal($array = null)
    {
        $final =array();

        foreach($array as $value)
            $final  = array_merge($final,$value);


        foreach($final as $key => &$value)
            $value = array_sum(array_column($array, $key));

        unset($value);

        return $final;
    }

}