<?php
/**
 * Created by PhpStorm.
 * User: rom
 * Date: 5/24/17
 * Time: 2:39 PM
 */

namespace App\Controller;


use Cake\Event\Event;

class UsersController extends AppController
{

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Auth->allow('add', 'logout');
    }

    public function isAuthorized($user)
    {
        // Admin can access every action
        if (in_array($this->request->getParam('action'), ['index', 'add', 'login', 'logout'])) {
            return true;
        }

        return parent::isAuthorized($user);
    }



    //admin functions
    public function adminIndex()
    {
        $users = $this->paginate($this->Users);

        $this->set(compact('users'));
        $this->set('_serialize', ['users']);
    }


    public function adminView($id = null)
    {
        $user = $this->Users->get($id,['contain' => ['Domains']]);

        $this->set(compact('user'));
        $this->set('_serialize',['user']);
    }

    public function adminEdit($id = null)
    {
        $user = $this->Users->get($id);

        if ($this->request->is(['patch', 'post', 'put'])) {

            $data = $this->request->getData();

            echo json_encode($data);
            $data['role'];

            $user = $user->set('role',$data['role']);

            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));

                return $this->redirect(['action' => 'admin_view',$user->id]);
            }
            $this->Flash->error(__('The user could not be saved. Please, try again.'));
        }
        $this->set(compact('user'));
        $this->set('_serialize', ['domain']);

    }



    // user_functions
    public function index()
    {
        $this->set('users', $this->Users->find('all'));
    }

    public function view($id = null)
    {
        $user = $this->Users->get($id);
        $this->set(compact('user'));
    }

    public function add()
    {
        $user = $this->Users->newEntity();
        $this->viewBuilder()->setLayout('unloggedLayout');
        if ($this->request->is('post')) {
            $user->set('role','disabled');
            $user = $this->Users->patchEntity($user, $this->request->getData());
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The user has been saved.'));
                return $this->redirect(['action' => 'login']);
            }
            $this->Flash->error(__('Unable to add the user.'));
        }
        $this->set('user', $user);
    }

    public function login()
    {

        /*---------------------------------*/
        $user = $this->Auth->user();

        $this->viewBuilder()->setLayout('unloggedLayout');

        if ($this->request->is('post')) {
            $user = $this->Auth->identify();
            if ($user) {
                $this->Auth->setUser($user);
                return $this->redirect($this->Auth->redirectUrl());
            }
            $this->Flash->error(__('Invalid username or password, try again'));
        }


        $this->set(compact('user'));
        $this->set('_serialize', ['user']);
    }

    public function logout()
    {
        return $this->redirect($this->Auth->logout());
    }


}